{"version":3,"sources":["components/Listing.js","components/HomePage.js","components/ListingDetail.js","components/Navbar.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Listing","showListing","props","listingData","map","eachListing","i","className","key","src","img","alt","to","title","link","this","Component","HomePage","state","center","lat","lng","zoom","ListingDetail","console","log","Navbar1","Navbar","fixed","bg","variant","Brand","href","Nav","Link","Search","Form","Group","controlId","Control","type","placeholder","App","data","DataJson","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"24xVAIqBA,E,2MACnBC,YAAc,WACZ,OAAO,EAAKC,MAAMC,YAAYC,KAAI,SAACC,EAAaC,GAC9C,OACE,yBAAKC,UAAU,UAAUC,IAAKF,GAC5B,yBAAKC,UAAU,eACf,yBAAKE,IAAKJ,EAAYK,IAAI,GAAIC,IAAI,UAChC,4BAAI,kBAAC,IAAD,CAAMC,GAAI,kBAAkBP,EAAYK,IAAI,IAAKL,EAAYQ,QACjE,2BAAIR,EAAYS,MAChB,6C,wEAOR,OAAO,6BAAMC,KAAKd,mB,GAhBee,aCGhBC,E,2MACnBC,MAAQ,CACNC,OAAQ,CACNC,IAAK,QACLC,KAAM,SAERC,KAAM,I,wEAGN,OACE,yBAAKf,UAAU,IACb,yBAAKA,UAAU,OACf,6BADA,IACM,6BADN,IACY,6BADZ,IACkB,6BADlB,IACwB,8BAgBxB,yBAAKA,UAAU,IACb,yBAAKA,UAAU,yBACb,4BAAQA,UAAU,wBAAlB,YACA,4BAAQA,UAAU,wBAAlB,SACA,4BAAQA,UAAU,wBAAlB,SAGF,kBAAC,EAAD,CAASJ,YAAaY,KAAKb,MAAMC,oB,GAnCLa,a,QCLjBO,E,iLASb,OADEC,QAAQC,IAAIV,KAAKb,MAAMC,aAErB,kC,GAV+Ba,a,gBCEtBU,E,iLAEb,OACI,6BAEV,kBAACC,EAAA,EAAD,CAAQC,MAAM,MAAMC,GAAG,OAAOC,QAAQ,QACpC,kBAAC,IAAD,CAAMlB,GAAG,KAAI,kBAACe,EAAA,EAAOI,MAAR,CAAcC,KAAK,KAAnB,YACb,kBAACC,EAAA,EAAD,CAAK1B,UAAU,+BAEf,kBAAC,IAAD,CAAMK,GAAG,cAAT,WACE,kBAACqB,EAAA,EAAIC,KAAL,CAAUF,KAAK,aAAf,QACA,kBAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,YAAf,e,GAX+BhB,a,QCDhBmB,E,iLAEb,OAGQ,kBAACC,EAAA,EAAD,KAEhB,6DAEoB,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBAElB,kBAACF,EAAA,EAAKG,QAAN,CAAchC,UAAU,OAAOiC,KAAK,OAAOC,YAAY,kC,GAX3CzB,aCOf0B,E,2MAEnBxB,MAAQ,CACNyB,KAAMC,G,wEAKE,IAAD,OAEP,OACE,6BAGE,kBAAC,EAAD,MACF,yBAAKrC,UAAU,aAAf,KACG,kBAAC,EAAD,MACD,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEsC,OAAK,EACLC,KAAK,aACLC,OAAQ,SAAA7C,GAAK,OACX,kBAAC,EAAD,iBACMA,EADN,CAEEC,YAAa,EAAKe,MAAMyB,WAI9B,kBAAC,IAAD,CACEE,OAAK,EACLC,KAAK,qBACLC,OAAQ,SAAA7C,GAAK,OACX,kBAAC,EAAD,iBACMA,EADN,CAEEC,YAAa,EAAKe,MAAMyB,iB,GAlCP3B,aCEbgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASN,OACT,kBAAC,IAAD,KACA,kBAAC,EAAD,OAEAO,SAASC,eAAe,SDqHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1970b503.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Link } from 'react-router-dom'\n\nexport default class Listing extends Component {\n  showListing = () => {\n    return this.props.listingData.map((eachListing, i) => {\n      return (\n        <div className=\"listing\" key={i}>\n          <div className=\"listing-img\">\n          <img src={eachListing.img[1]} alt=\"House\" />\n            <h4><Link to={'/listingdetail/'+eachListing.img[0]}>{eachListing.title}</Link></h4>\n            <p>{eachListing.link}</p>\n            <p>$ 1,1000</p>\n          </div>\n        </div>\n      );\n    });\n  };\n  render() {\n    return <div>{this.showListing()}</div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport Listing from \"./Listing\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n// import GoogleMapReact from \"google-map-react\";\n// import Marker from \"./Marker\";\n// import MapImg from \"../images/googlemap.jpeg\"\n\nexport default class HomePage extends Component {\n  state = {\n    center: {\n      lat: 25.7617,\n      lng: -80.1918\n    },\n    zoom: 10\n  };\n  render() {\n    return (\n      <div className=\"\">\n        <div className=\"map\" >\n        <br/> <br/> <br/> <br/> <br/>\n          {/* <GoogleMapReact\n            style={{ height: \"100px\", width: \"50%\" }}\n            bootstrapURLKeys={{\n              key: \"AIzaSyDZiBSkaZztK2mN3Q8QzvzcfPCsDX2_p58\"\n            }}\n            defaultCenter={this.state.center}\n            defaultZoom={this.state.zoom}\n          >\n          \n             <Marker\n              lat=\"25.7617\"\n              lng=\"-80.1918\"\n            /> \n          </GoogleMapReact> */}\n        </div>\n        <div className=\"\">\n          <div className=\"flex-row  text-center\">\n            <button className=\"btn btn-outline-dark\">For Sale</button>\n            <button className=\"btn btn-outline-dark\">Price</button>\n            <button className=\"btn btn-outline-dark\">Type</button>\n            \n          </div>\n          <Listing listingData={this.props.listingData} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class ListingDetail extends Component {\n\n    \n    render() {\n        // let theEventDetails = this.props.listingData.find((event,i) => {\n        //     return event[i] === this.props.match.params.id;\n        //   });\n        //   let theEvent = theEventDetails;\n          console.log(this.props.listingData)\n        return (\n            <div>\n                {/* {theEvent.title} */}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Navbar, FormControl, Form, Button, Nav } from 'react-bootstrap';\nimport {Link} from 'react-router-dom'\n\nexport default class Navbar1 extends Component {\n    render() {\n        return (\n            <div>\n                \n  <Navbar fixed=\"top\" bg=\"dark\" variant=\"dark\" >\n    <Link to='/'><Navbar.Brand href=\"/\">IRONBNB</Navbar.Brand></Link>\n    <Nav className=\"mr-sm-2 justify-content-end\">\n      \n    <Link to=\"/listings/\">listing</Link>\n      <Nav.Link href=\"#features\">RENT</Nav.Link>\n      <Nav.Link href=\"#pricing\">SELL</Nav.Link>\n    </Nav>\n  </Navbar>\n\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Form, Button } from 'react-bootstrap'\n\nexport default class Search extends Component {\n    render() {\n        return (\n\n\n                <Form>\n\n<h2>Let's find your perfect home!</h2>\n\n                    <Form.Group controlId=\"formBasicPassword\">\n\n                        <Form.Control className=\"srch\" type=\"text\" placeholder=\"Address, City, Zip Code\" />\n                    </Form.Group>\n\n                    {/* <Button variant=\"primary\" type=\"submit\">\n                        Submit\n  </Button> */}\n                </Form>\n\n\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport DataJson from \"./data.json\";\nimport Listing from \"./components/Listing\";\nimport Home from \"./components/HomePage\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport ListingDetail from './components/ListingDetail'\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport NavBar from './components/Navbar'\nimport Search from './components/Search'\n\nexport default class App extends Component {\n\n  state = {\n    data: DataJson,\n  }\n\n\n  \n  render() {\n    // console.log(this.state.data);\n    return (\n      <div>\n        {/* <Listing listingData={this.state.data} /> */}\n        \n        <NavBar />\n      <div className=\"searchbar\"> </div>\n         <Search />\n        <Switch>\n          <Route\n            exact\n            path=\"/listings/\"\n            render={props => (\n              <Home\n                {...props}\n                listingData={this.state.data}\n              />\n            )}\n          />\n          <Route\n            exact\n            path=\"/listingdetail/:id\"\n            render={props => (\n              <ListingDetail\n                {...props}\n                listingData={this.state.data}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\n\nReactDOM.render(\n<BrowserRouter>\n<App />\n</BrowserRouter>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}